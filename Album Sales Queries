-- Show Customers (their full names, customer ID, and country) who are not in the US. 

SELECT FirstName, LastName, CustomerId, Country 
FROM customers
WHERE Country <> "USA"


-- Show only the Customers from Brazil.

SELECT * FROM customers
WHERE Country = "Brazil"
;


-- Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT c.FirstName, c.LastName, i.InvoiceID, i.InvoiceDate, i.BillingCountry
FROM chinook.invoices i
LEFT JOIN chinook.customers c
ON c.CustomerID = i.InvoiceId
WHERE Country = "Brazil"
;


-- Show the Employees who are Sales Agents.

SELECT * FROM employees
WHERE Title = 'Sales Support Agent'
;


-- Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT BillingCountry
FROM invoices
;


-- Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT e.FirstName, e.LastName, i.InvoiceId
FROM chinook.customers c
LEFT JOIN chinook.employees e
ON c.SupportRepId = e.EmployeeId
LEFT JOIN chinook.invoices i
ON c.CustomerId = i.CustomerId
;


-- Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT i.Total AS [Invoice Total], c.FirstName AS 'customer_first_name', c.LastName AS 'customer_last_name', c.Country AS 'customer_country', e.FirstName AS 'employee_first_name', e.LastName AS 'employee_last_name'
FROM chinook.customers c
LEFT JOIN chinook.employees e ON c.SupportRepId = e.EmployeeId
LEFT JOIN chinook.invoices i ON c.CustomerId = i.CustomerId
;


-- How many Invoices were there in 2009?

SELECT COUNT(InvoiceId)
FROM invoices
WHERE InvoiceDate LIKE "2009%"
;


-- What are the total sales for 2009?

SELECT ROUND(SUM(Total),2) AS [Total Sales]
FROM invoices
WHERE InvoiceDate LIKE "2009%"
;


-- Write a query that includes the purchased track name with each invoice line ID.

SELECT t.Name, ii.InvoiceLineId
FROM invoice_items ii
LEFT JOIN tracks t
ON ii.TrackId = t.TrackId
;


-- Write a query that includes the purchased track name AND artist name with each invoice line ID.

SELECT t.Name AS [Track Name], 
art.Name AS [Artist Name], 
ii.InvoiceLineId AS [Invoice Line ID]
FROM invoice_items ii
LEFT JOIN tracks t
ON ii.TrackId = t.TrackId
LEFT JOIN albums alb
ON t.AlbumId = alb.AlbumId
LEFT JOIN artists art
ON alb.ArtistId = art.ArtistId
;


-- Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT t.Name AS [Track Name], a.Title AS [Album Name], m.Name AS [Media Type], g.Name AS [Genre]
FROM tracks t
LEFT JOIN albums a
ON t.AlbumId = a.AlbumId
LEFT JOIN media_types m
ON t.MediaTypeId = m.MediaTypeId
LEFT JOIN genres g
ON t.GenreId = g.GenreId
;


-- Show the total sales made by each sales agent.

SELECT e.FirstName, e.LastName, ROUND(SUM(i.Total),2) AS [Total Sales]
FROM invoices i
LEFT JOIN customers c
ON i.CustomerID = c.CustomerId
LEFT JOIN employees e
ON c.SupportRepId = e.EmployeeId
GROUP BY e.EmployeeId
;


-- Which sales agent made the most dollars in sales in 2009?

WITH sales AS 
(
SELECT e.FirstName, e.LastName, ROUND(SUM(i.Total),2) AS "total_sales"
    FROM invoices i
    LEFT JOIN customers c
    ON i.CustomerID = c.CustomerId
    LEFT JOIN employees e
    ON c.SupportRepId = e.EmployeeId
    WHERE i.InvoiceDate LIKE "2009%"
    GROUP BY e.EmployeeId
)
SELECT FirstName, LastName, MAX(total_sales) AS "most_total_sales"
FROM sales
;

-- Which genre has been added to the most playlists?

SELECT g.Name, COUNT(p.PlaylistId) AS playlist_adds

FROM tracks t

JOIN genres g
ON t.GenreId = g.GenreId

JOIN playlist_track pt
ON t.TrackId = pt.TrackId

JOIN playlists p
ON pt.PlaylistId = p.PlaylistId

GROUP BY g.Name 
ORDER BY playlist_adds DESC
LIMIT 1
;
